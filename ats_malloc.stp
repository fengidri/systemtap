global Address

probe begin {
    printf("=============begin============\n")
}

function append(flag, addr, size){
    name = pid2execname(pid());
    if (name == "[ET_NET 0]" || name == "traffic_server"){
        Address[ns_tid(), flag, addr] = size;
    }
}

function free(flag, addr){
        delete Address[ns_tid(), flag, addr];
}

probe process(@1).function("ats_malloc").return
{
    append("malloc", $return, $size);
}

probe process(@1).function("ats_calloc").return
{
    append("malloc", $return, $elsize);
}

probe process(@1).function("ats_realloc").return
{
    append("malloc", $return, $size);
}

probe process(@1).function("ats_free").call
{
    free("malloc", s64_arg(1));
}

probe process(@1).function("ats_memalign_free").call
{
    free("malloc", $ptr);
}


probe vm.mmap
{
    append("mmap", address, length);
}
probe vm.munmap
{
    free("mmap", address);
}

probe timer.s(5){
    malloc = 0;
    mmap = 0;
    printf("=====================================\n");
    foreach ([tid, flag, address] in Address){
        size = Address[tid, flag, address];
        printf("0x%lx: size: %d\n", address, size);

        if (flag == "malloc")
            malloc += size;
        if (flag == "mmap")
            mmap += size;
    }

    printf("Malloc: %d byte\n", malloc);
    printf("Mmap: %d byte\n", mmap);
    printf("Total: %d byte\n", malloc + mmap);
}











